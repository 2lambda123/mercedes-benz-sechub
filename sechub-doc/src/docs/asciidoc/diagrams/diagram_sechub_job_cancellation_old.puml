@startuml

'Hide empty parts:
hide empty fields
hide empty methods

'You can find more examles at https://plantuml.com/class-diagram

!include module_sechub_job.puml
!include module_sechub_eventbus.puml
!include module_sechub_productresult.puml

package org.springframework.batch {
    class JobExplorer {
    }
    class JobOperator {
    }
    
    class SimpleJobLauncher {
    }
    
    database BatchJobs {
    }
    
    JobExplorer --> BatchJobs
    JobOperator --> BatchJobs
    
}

package com.mercedesbenz.sechub.domain.administration {
    
    class JobAdministrationRestController   
    
    class JobAdministrationMessageHandler
    
    class JobCancelService #Lightblue;text:blue ##MediumBlue
    
    JobAdministrationRestController -> JobCancelService
    
    JobCancelService  --> DomainMessageService  #blue;line.dashed;text:blue : sends async REQUEST_JOB_CANCELLATION (B 2.1) 
    
    DomainMessageService --> JobAdministrationMessageHandler #green;line.dashed;text:green : sends async CANCELLATION_RUNNING (B 3.1)
}

package com.mercedesbenz.sechub.domain.notification {
    class NotificationMessageHandler
    
    DomainMessageService --> NotificationMessageHandler #green;line.dashed;text:green : sends async CANCELLATION_RUNNING (B 3.1)
}

 

package com.mercedesbenz.sechub.domain.schedule {

 package com.mercedesbenz.sechub.domain.schedule.batch {
    
        class SchedulerCancelBatchJobService {
        }
        class SchedulerBatchJobStatusRequestHandler {
            
        }
    
        class AsyncJobLauncher extends SimpleJobLauncher {
        }
        class ScanExecutionTasklet {
        }
        
        class BatchConfiguration {
        }
    
        AsyncJobLauncher --> ScanExecutionTasklet : starts
       
        SchedulerCancelBatchJobService  -> JobOperator #blue;line.dashed : stops batch job
        SchedulerBatchJobStatusRequestHandler -> JobExplorer #Fuchsia;line.dashed :reads status
    
    }   

   
    
    
   
    class ScheduleJobLauncherService {
    
    }
    

    class SchedulerJobBatchTriggerService {
    }
    
    
    
    class ScheduleMessagehandler {
        handleCancelJobRequested()
    }
    
    class SchedulerCancelJobService #paleGreen;text:green ##Black {
    }
    
    
    note top of SchedulerCancelJobService #palegreen;line.dashed;text:green
            The steps
            - B 2.3
            - B 3.*
            are only triggered when the SecHub job has 
            the execution result NONE. 
            
            The execution state is <b>not</b> inspected.
    end note 
    BatchConfiguration --> ScanExecutionTasklet : creates
    SchedulerJobBatchTriggerService --> ScheduleSecHubJob : stores result
    SchedulerJobBatchTriggerService --> ScheduleJobLauncherService : uses
    ScheduleJobLauncherService --> AsyncJobLauncher : uses
    
    ScheduleMessagehandler  --> SchedulerCancelJobService #blue;line.dashed;text:blue : "calls cancel service\nbecause of B 2.2"
    SchedulerCancelJobService --> ScheduleSecHubJob #blue;line.dashed;text:blue : marks as CANCEL_REQUESTED (B 2.3)
    SchedulerCancelJobService --> SchedulerCancelBatchJobService #blue;line.dashed;text:blue : cancel spring Batch job (B 2.3)
    
    
    ScheduleJobLauncherService <-> ScanExecutionTasklet
    
    DomainMessageService <--> SchedulerCancelJobService #green;line.dashed;text:green : sends async CANCELLATION_RUNNING (B 3.1)
    DomainMessageService  --> ScheduleMessagehandler #blue;line.dashed;text:blue : sends async REQUEST_JOB_CANCELLATION (B 2.1)
    DomainMessageService  <--> SchedulerBatchJobStatusRequestHandler  #Fuchsia;line.dashed;text:Fuchsia : sends synch REQUEST_BATCH_JOB_STATUS (A 2.1)
    
    
}

package com.mercedesbenz.sechub.domain.scan {

    class SecHubExecutionContext {
        markCancelRequested()
    }

    class ScanProgressMonitor #Fuchsia;text:black ##fuchsia {
    }
    
    interface ProductExecutor {
    
    }
    
    class ScanService #silver {
        
        startScan()
    }
    
     
    class ScanJobExecutor #silver {
    
    }
    
    class ScanJobExecutionRunnable {
    }
    
    node ExecutorThread{
    }
    
    class ScanJobCancellationRunnable {
    }
    
    node CancellationThread{
    }
    
    interface Adapter {
    } 
    
    interface ProductExecutionStoreService {
        + executeProductsAndStoreResults(SecHubExecutionContext context)
    }
    
    
    abstract class AbstractProductExecutionService implements ProductExecutionStoreService{
    
    }
    
    class ProductExecutionServiceContainer {
    }
    
    abstract class AbstractProductExecutor implements ProductExecutor{
    }
    
    interface CanceableProductExecutor extends ProductExecutor
    class ScanJobRunnableData {
    }
    class ProductExecutorData {
    }
    
    note top of ScanJobExecutor 
        The scan job executor is central point of 
        the scan steep in scan domain. 
        
        It does the start of the scan itself and 
        does also periodically the inspect the ~scheduler~ 
        batch job status via event bus
    end note

    AbstractProductExecutor --> ProductExecutorData : creates
    AbstractProductExecutor --> SecHubExecutionContext : uses
    
    AbstractProductExecutionService --> ProductResult : stores results
    AbstractProductExecutionService -> ProductExecutor: uses
    AbstractProductExecutionService --> SecHubExecutionContext: uses
    
    ProductExecutor -> Adapter: configures and uses
    ProductExecutor --> SecHubExecutionContext: uses
    
    AbstractProductExecutionService --> ProductExecutor : calls
    
    ScanService ..> ScanJobExecutor : creates + uses (A 1.3)
    ScanJobExecutor --> ScanProgressMonitor #fuchsia 
    
    ExecutorThread ..> ScanJobExecutionRunnable: runs
    CancellationThread ..> ScanJobCancellationRunnable: runs
    
    ScanJobExecutor  -> ScanJobExecutionRunnable : creates 
    ScanJobExecutor  -> ScanJobExecutionRunnable #fuchsia;text:fuchsia : cancels 
    ScanJobExecutor  -> ExecutorThread : starts
    ScanJobExecutor  -> ScanJobCancellationRunnable #fuchsia;text:fuchsia : creates if necessary
    ScanJobExecutor  -> CancellationThread #fuchsia;text:fuchsia : starts when necessary
    ScanJobExecutor  -> SecHubExecutionContext : creates context 
    ScanJobExecutor --> ScanJobRunnableData : creates
    
    ScanJobRunnableData o-- SecHubExecutionContext 
    ScanJobRunnableData o-- ProductExecutionServiceContainer
    
    ScanJobExecutionRunnable --> SecHubExecutionContext
    ScanJobExecutionRunnable --> ExecutorThread: "interrupts ExecutorThread\nwhen being canceled.\nThis immediately interrupts all product calls hard." 
    ScanJobExecutionRunnable --> SecHubExecutionContext : "marks as cancel requested\nso available in product executors"
    ScanJobExecutionRunnable --> ScanJobRunnableData
    ScanJobExecutionRunnable --> ProductExecutionStoreService : calls
    
    ScanJobCancellationRunnable --> ScanJobRunnableData
    ScanJobCancellationRunnable --> SecHubExecutionContext : "uses information about \nproduct executors and data"

    ScanExecutionTasklet <--> DomainMessageService #silver;line.dashed;text:silver  : sends "START_SCAN" (A 1.1) SYNCHRON
    
    ScanProgressMonitor  <--> DomainMessageService #Fuchsia;line.dashed;text:Fuchsia : "sends synchron REQUEST_BATCH_JOB_STATUS (A 2.1)\nand receives job status"
    ScanService <--> DomainMessageService  #silver;line.dashed;text:silver : recevies "START_SCAN" (A 1.2) SYNCHRON (returns result)
    
    Adapter ---> Procuct : communication
    
     
}

node Procuct{
}


note top of DomainMessageService
    Is used to have event 
    communications between domains
end note

legend top right
 |= Event Nr. |= Message ID |= What happens at this event ? |
 |<back:silver> A 1.*</back>| START_SCAN | Scan - running |
 |<back:fuchsia> A 2.*</back>| REQUEST_BATCH_JOB_STATUS | Scan - periodic inspection of batch job still running | 
 |<back:steelblue> B 2.*</back>| REQUEST_JOB_CANCELLATION | Cancel scan request triggered, batch job interrupted - has impact to A 2.* |
 |<back:green> B 3.*</back>| CANCELLATION_RUNNING | Cancel scan request done, cancel operation ongoing |
 endlegend

@enduml
